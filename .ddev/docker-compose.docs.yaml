version: '3.6'

services:
    web:
        links:
            - docs:docs

    docs:
        container_name: ddev-${DDEV_SITENAME}-docs
        restart: always
        labels:
            com.ddev.site-name: ${DDEV_SITENAME}
            com.ddev.platform: ddev
            com.ddev.app-type: typo3
            com.ddev.approot: $DDEV_APPROOT
        image: t3docs/render-documentation:latest
        volumes:
            - /dev/shm:/dev/shm
            - ../:/PROJECT:ro
            - ../Documentation-GENERATED-temp:/RESULT
        environment:
            - HOST_UID=$DDEV_UID
            - HOST_GID=$DDEV_GID
        entrypoint: |
            sh -c "echo 'The doc script must be run as root. Thus what is written to rw-volumes belongs to root.' \
                        'There are way better ways to solve that (search docker mounts user mapping), but for now' \
                        'this should suffice: we keep the owner (root), but allow anybody and make sure the umask' \
                        'reflects that. We also set your host group and the sticky bit.' \
                        'So... Now I hope you dont end up with directories you are not able to delete.'
            umask 0000
            chmod 2775 /RESULT
            chgrp $DDEV_GID /RESULT
            
            python <<'EOF'
            # This gives you a remote shell on port 7000 of the docs container.
            # Don't use in production blabla.
            # print/stdout goes to the container-local stdout (which goes to docker log, investigate with
            # 'ddev logs -s docs'), conn.send() to the receiver.
            import socket, sys, subprocess, shlex
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            print('Listening on port 7000 for parameters to command /ALL/Menu/mainmenu.sh (e.g. makehtml)')
            sys.stdout.flush()
            s.bind(('', 7000))
            while True:
                s.listen(1) # only allow 1 conn
                conn, addr = s.accept()
                data = conn.recv(1024)
                cmd = ['/ALL/Menu/mainmenu.sh']
                cmd.extend(shlex.split(str(data)))
                print('Running ' + str(cmd) + '...')
                conn.send('Running ' + str(cmd) + '...\n')
                proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
                while True: # read linewise and "tee" it to receiver and container-local stdout
                    line = proc.stdout.readline()
                    if line == '' and proc.poll() is not None:
                        break
                    sys.stdout.write(line)
                    sys.stdout.flush()
                    conn.send(line)

                conn.close()
            EOF"
